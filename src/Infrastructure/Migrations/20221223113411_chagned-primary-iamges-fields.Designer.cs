// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using apollo.Infrastructure.Persistence;

namespace apollo.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223113411_chagned-primary-iamges-fields")]
    partial class chagnedprimaryiamgesfields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Shared.Domain.Common.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccessLevelID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Appraisal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppraisalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("ValuationApproachID")
                        .HasColumnType("int");

                    b.Property<int>("ValuationTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("ValuationApproachID");

                    b.HasIndex("ValuationTypeID");

                    b.ToTable("Appraisals");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CeilingHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBuilt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DensityRatio")
                        .HasColumnType("float");

                    b.Property<int?>("DeveloperID")
                        .HasColumnType("int");

                    b.Property<decimal>("EfficiencyRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Elevators")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrossBuildingSize")
                        .HasColumnType("float");

                    b.Property<string>("GrossLeasableSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LEED")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeasingContactID")
                        .HasColumnType("int");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("MinimumLeaseTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("OperatingHours")
                        .HasColumnType("bit");

                    b.Property<int?>("OwnershipTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PEZA")
                        .HasColumnType("int");

                    b.Property<string>("ParkingElevator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerElevator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectStatusID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyManagementID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceElevator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telcos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantMix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalFloors")
                        .HasColumnType("int");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TurnOverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypicalFloorPlateSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DeveloperID");

                    b.HasIndex("LeasingContactID");

                    b.HasIndex("OwnershipTypeID");

                    b.HasIndex("ProjectStatusID");

                    b.HasIndex("PropertyID")
                        .IsUnique();

                    b.HasIndex("PropertyManagementID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyStatusID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditRatings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HubSpotID")
                        .HasColumnType("int");

                    b.Property<int>("IndustryGroupID")
                        .HasColumnType("int");

                    b.Property<int>("IndustryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OriginID")
                        .HasColumnType("int");

                    b.Property<int>("SectorID")
                        .HasColumnType("int");

                    b.Property<int>("SubsidiaryID")
                        .HasColumnType("int");

                    b.Property<int>("TenantClassificationID")
                        .HasColumnType("int");

                    b.Property<string>("UserCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModified")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ContactProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HubSpotID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrokerCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("BrokerID")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistorical")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaseTerm")
                        .HasColumnType("int");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantClassificationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrokerCompanyID");

                    b.HasIndex("BrokerID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("TenantClassificationID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int?>("ThumbNailId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentKey")
                        .IsUnique()
                        .HasFilter("[DocumentKey] IS NOT NULL");

                    b.HasIndex("ThumbNailId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Floor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FloorPlateSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Industrial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accommodate10W")
                        .HasColumnType("bit");

                    b.Property<string>("AnyRestriction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorLoadingCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndustyTypeAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternetServiceProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccupancyClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerSupplyCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderClass")
                        .HasColumnType("int");

                    b.Property<int>("StructureType")
                        .HasColumnType("int");

                    b.Property<double>("TGLSCoveredArea")
                        .HasColumnType("float");

                    b.Property<double>("TGLSOpenArea")
                        .HasColumnType("float");

                    b.Property<int>("Total10WSlots")
                        .HasColumnType("int");

                    b.Property<string>("TotalBaysDocks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalGrossLeasableSizeSQM")
                        .HasColumnType("float");

                    b.Property<int>("TypeBayDock")
                        .HasColumnType("int");

                    b.Property<string>("VentilationSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterSewageTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterSupply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WithCargoLifts")
                        .HasColumnType("bit");

                    b.Property<bool>("WithOfficeComponents")
                        .HasColumnType("bit");

                    b.Property<string>("ZoningClassification")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PropertyID");

                    b.ToTable("IndustrialListings");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Investment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AirConditioningCharges")
                        .HasColumnType("float");

                    b.Property<string>("AirConditioningSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnnualEscalation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AssociationDues")
                        .HasColumnType("float");

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackupPower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BaseGrossSellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("BaseNetSellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("BaseRent")
                        .HasColumnType("float");

                    b.Property<string>("BuildingClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CeilingHeight")
                        .HasColumnType("float");

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<double>("CommonArea")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DensityRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EfficiencyRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FloorArea")
                        .HasColumnType("float");

                    b.Property<string>("FloorAreaRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Frontage")
                        .HasColumnType("float");

                    b.Property<double>("GrossSellingPrice")
                        .HasColumnType("float");

                    b.Property<string>("HandoverCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LeasableArea")
                        .HasColumnType("float");

                    b.Property<string>("LeaseTermYears")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<double>("LotArea")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetSellingPrice")
                        .HasColumnType("float");

                    b.Property<string>("PEZAStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ParkingSlotLeaseRate")
                        .HasColumnType("float");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("TaxDeclarationClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelecommunicationProviders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalElevators")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalFloors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalParkingSlots")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalRooms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TypicalFloorPlate")
                        .HasColumnType("float");

                    b.Property<float>("YearCompleted")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Lead", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DealID")
                        .HasColumnType("int");

                    b.Property<string>("DesiredLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeadCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LeadSourceID")
                        .HasColumnType("int");

                    b.Property<int>("LeadStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Mandate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PropertyID");

                    b.ToTable("Mandates");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Property", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<int?>("ContactID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExclusive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<int?>("ListingID")
                        .HasColumnType("int");

                    b.Property<int?>("MasterProjectID")
                        .HasColumnType("int");

                    b.Property<int?>("MasterPropertyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerCompanyID")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentialUnitID")
                        .HasColumnType("int");

                    b.Property<int?>("SEOID")
                        .HasColumnType("int");

                    b.Property<int?>("SubTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ContactID");

                    b.HasIndex("GradeID");

                    b.HasIndex("ListingID");

                    b.HasIndex("MasterProjectID");

                    b.HasIndex("MasterPropertyID");

                    b.HasIndex("OwnerCompanyID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PropertyTypeID");

                    b.HasIndex("ResidentialUnitID")
                        .IsUnique()
                        .HasFilter("[ResidentialUnitID] IS NOT NULL");

                    b.HasIndex("SEOID");

                    b.HasIndex("SubTypeID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.PropertyAgent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisibleOnWeb")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.HasIndex("PropertyID");

                    b.ToTable("PropertyAgent");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.PropertyDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentID")
                        .IsUnique();

                    b.HasIndex("PropertyID");

                    b.ToTable("PropertyDocuments");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.PropertyImageVersion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyImageID")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PropertyImageVersions");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.ResidentialListing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Bathroom")
                        .HasColumnType("int");

                    b.Property<int>("Bedroom")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FloorArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HandOverCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HandOverDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<int>("ListingTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("LotArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParkingSlot")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<decimal>("RentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("AgentID")
                        .IsUnique()
                        .HasFilter("[AgentID] IS NOT NULL");

                    b.HasIndex("ListingTypeID");

                    b.HasIndex("PropertyID");

                    b.ToTable("ResidentialListings");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACCharges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ACExtensionCharges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailabilityID")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CUSA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EscalationRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FloorID")
                        .HasColumnType("int");

                    b.Property<string>("HandOverConditionID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("HandOverConditionID1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HandOverDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LeaseFloorArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<int>("ListingTypeID")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLeaseTerm")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ParkingRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitStatusID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AvailabilityID");

                    b.HasIndex("FloorID");

                    b.HasIndex("HandOverConditionID");

                    b.HasIndex("HandOverConditionID1");

                    b.HasIndex("ListingTypeID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UnitStatusID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Logs.AuditTrail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Availability", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PropertyTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyTypeID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.HandOverCondition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("HandOverConditions");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.ListingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ListingTypes");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.MicroDistrict", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("MicroDistricts");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.OwnershipType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("OwnershipTypes");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.ProjectStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.PropertyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.SubMarket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("SubMarkets");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.SubType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SubTypes");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.TenantClassification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TenantClassifications");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.UnitStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UnitStatuses");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.ValuationApproach", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ValuationApproach");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.ValuationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ValuationType");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Shared.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressTag")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<int?>("LegacyID")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("MicroDistrictID")
                        .HasColumnType("int");

                    b.Property<string>("PolygonPoints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubMarketID")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("MicroDistrictID");

                    b.HasIndex("SubMarketID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Shared.SEO", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeaturedWeight")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MetaKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PublishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SEO");
                });

            modelBuilder.Entity("apollo.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Domain.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Appraisal", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Property", null)
                        .WithMany("Appraisals")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.References.ValuationApproach", "ValuationApproach")
                        .WithMany()
                        .HasForeignKey("ValuationApproachID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.References.ValuationType", "ValuationType")
                        .WithMany()
                        .HasForeignKey("ValuationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValuationApproach");

                    b.Navigation("ValuationType");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Building", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Company", "Developer")
                        .WithMany("DevelopedBuildings")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.Core.Company", "LeasingContact")
                        .WithMany("LeasedBuildings")
                        .HasForeignKey("LeasingContactID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.References.OwnershipType", "OwnershipType")
                        .WithMany()
                        .HasForeignKey("OwnershipTypeID");

                    b.HasOne("apollo.Domain.Entities.References.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusID");

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithOne("Building")
                        .HasForeignKey("apollo.Domain.Entities.Core.Building", "PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Company", "PropertyManagement")
                        .WithMany("PropertyManagedBuildings")
                        .HasForeignKey("PropertyManagementID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Developer");

                    b.Navigation("LeasingContact");

                    b.Navigation("OwnershipType");

                    b.Navigation("ProjectStatus");

                    b.Navigation("Property");

                    b.Navigation("PropertyManagement");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Contact", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Contract", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Company", "BrokerCompany")
                        .WithMany("BrokerContracts")
                        .HasForeignKey("BrokerCompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Contact", "Broker")
                        .WithMany("BrokerContracts")
                        .HasForeignKey("BrokerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Company", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Contact", "Contact")
                        .WithMany("Contracts")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.References.TenantClassification", "TenantClassification")
                        .WithMany()
                        .HasForeignKey("TenantClassificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("BrokerCompany");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Property");

                    b.Navigation("TenantClassification");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Document", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Document", "ThumbNail")
                        .WithMany()
                        .HasForeignKey("ThumbNailId");

                    b.Navigation("ThumbNail");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Floor", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Industrial", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Investment", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Mandate", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Document", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany("Mandates")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Property", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("apollo.Domain.Entities.Core.Contact", "Contact")
                        .WithMany("PropertyListed")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.References.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeID");

                    b.HasOne("apollo.Domain.Entities.Core.Property", "MasterProject")
                        .WithMany()
                        .HasForeignKey("MasterProjectID");

                    b.HasOne("apollo.Domain.Entities.Core.Property", "MasterProperty")
                        .WithMany("Buildings")
                        .HasForeignKey("MasterPropertyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.Core.Company", "OwnerCompany")
                        .WithMany()
                        .HasForeignKey("OwnerCompanyID");

                    b.HasOne("apollo.Domain.Entities.Core.Contact", "Owner")
                        .WithMany("PropertyOwned")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.References.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "ResidentialUnit")
                        .WithOne("Listing")
                        .HasForeignKey("apollo.Domain.Entities.Core.Property", "ResidentialUnitID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("apollo.Domain.Entities.Shared.SEO", "SEO")
                        .WithMany()
                        .HasForeignKey("SEOID");

                    b.HasOne("apollo.Domain.Entities.References.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeID");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("Grade");

                    b.Navigation("MasterProject");

                    b.Navigation("MasterProperty");

                    b.Navigation("Owner");

                    b.Navigation("OwnerCompany");

                    b.Navigation("PropertyType");

                    b.Navigation("ResidentialUnit");

                    b.Navigation("SEO");

                    b.Navigation("SubType");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.PropertyAgent", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID");

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany("Agents")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.PropertyDocument", b =>
                {
                    b.HasOne("apollo.Domain.Entities.Core.Document", "Document")
                        .WithOne()
                        .HasForeignKey("apollo.Domain.Entities.Core.PropertyDocument", "DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany("PropertyDocuments")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.ResidentialListing", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", "Agent")
                        .WithOne()
                        .HasForeignKey("apollo.Domain.Entities.Core.ResidentialListing", "AgentID");

                    b.HasOne("apollo.Domain.Entities.References.ListingType", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("ListingType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Unit", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.Availability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Floor", "Floor")
                        .WithMany("Units")
                        .HasForeignKey("FloorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.References.HandOverCondition", "HandOverCondition")
                        .WithMany()
                        .HasForeignKey("HandOverConditionID1");

                    b.HasOne("apollo.Domain.Entities.References.ListingType", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.Core.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID");

                    b.HasOne("apollo.Domain.Entities.References.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("Floor");

                    b.Navigation("HandOverCondition");

                    b.Navigation("ListingType");

                    b.Navigation("Property");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.City", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Grade", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.MicroDistrict", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.City", "City")
                        .WithMany("MicroDistricts")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Province", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Region", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.State", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.SubMarket", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.City", "City")
                        .WithMany("SubMarkets")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Shared.Address", b =>
                {
                    b.HasOne("apollo.Domain.Entities.References.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apollo.Domain.Entities.References.MicroDistrict", "MicroDistrict")
                        .WithMany()
                        .HasForeignKey("MicroDistrictID");

                    b.HasOne("apollo.Domain.Entities.References.SubMarket", "SubMarket")
                        .WithMany()
                        .HasForeignKey("SubMarketID");

                    b.Navigation("City");

                    b.Navigation("MicroDistrict");

                    b.Navigation("SubMarket");
                });

            modelBuilder.Entity("apollo.Infrastructure.Identity.RefreshToken", b =>
                {
                    b.HasOne("Shared.Domain.Common.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Company", b =>
                {
                    b.Navigation("BrokerContracts");

                    b.Navigation("Contacts");

                    b.Navigation("Contracts");

                    b.Navigation("DevelopedBuildings");

                    b.Navigation("LeasedBuildings");

                    b.Navigation("PropertyManagedBuildings");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Contact", b =>
                {
                    b.Navigation("BrokerContracts");

                    b.Navigation("Contracts");

                    b.Navigation("PropertyListed");

                    b.Navigation("PropertyOwned");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Floor", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("apollo.Domain.Entities.Core.Property", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Appraisals");

                    b.Navigation("Building");

                    b.Navigation("Buildings");

                    b.Navigation("Contracts");

                    b.Navigation("Listing");

                    b.Navigation("Mandates");

                    b.Navigation("PropertyDocuments");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.City", b =>
                {
                    b.Navigation("MicroDistricts");

                    b.Navigation("SubMarkets");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Country", b =>
                {
                    b.Navigation("Regions");

                    b.Navigation("States");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("apollo.Domain.Entities.References.Region", b =>
                {
                    b.Navigation("Provinces");
                });
#pragma warning restore 612, 618
        }
    }
}
